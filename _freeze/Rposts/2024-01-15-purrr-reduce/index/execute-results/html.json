{
  "hash": "5e42f2115c309742ade424eda07ab47f",
  "result": {
    "markdown": "---\ntitle: \"`with` vs `within` evaluate expression in an environment\"\ndescription: \"The beauty of functional programming\"\nauthor:\n  - name: Joan Tan\n    url: https://joantan.org/\n    orcid: 0000-0001-6374-1568\n    affiliation: Department of Econometrics and Business Statistics, Monash University/ NAB \n    affiliation-url: https://www.monash.edu/business/econometrics-and-business-statistics/\ndate: 01-16-2024\ncategories: [R, intermediate, with] # self-defined categories\ncitation: \n  url: https://joantan.org/R/2024-01-16-with-within/ \nimage: with.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n`with` evaluates an expression in an environment constructed from data, possibly modifying the data in the process. `within` is similar to `with`, except that it modifies the data frame directly and only examines the environemnt after the evaluation of the expression.\n\n**Case study 1: to create a new variable `new_var` in `df` that is the sum of `var1` and `var2`**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(var1 = 1:10, var2 = 11:20)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2\n1     1   11\n2     2   12\n3     3   13\n4     4   14\n5     5   15\n6     6   16\n7     7   17\n8     8   18\n9     9   19\n10   10   20\n```\n:::\n\n```{.r .cell-code}\n# Method 1: with\ndf$new_var <- with(df, var1 + var2) \n# is equivalent to\ndf$new_var <- df$var1 + df$var2\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2 new_var\n1     1   11      12\n2     2   12      14\n3     3   13      16\n4     4   14      18\n5     5   15      20\n6     6   16      22\n7     7   17      24\n8     8   18      26\n9     9   19      28\n10   10   20      30\n```\n:::\n\n```{.r .cell-code}\n# Method 2: within\nwithin(df, new_var <- var1 + var2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2 new_var\n1     1   11      12\n2     2   12      14\n3     3   13      16\n4     4   14      18\n5     5   15      20\n6     6   16      22\n7     7   17      24\n8     8   18      26\n9     9   19      28\n10   10   20      30\n```\n:::\n\n```{.r .cell-code}\n# Method 3: mutate\nlibrary(dplyr)\ndf %>% mutate(new_var = var1 + var2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2 new_var\n1     1   11      12\n2     2   12      14\n3     3   13      16\n4     4   14      18\n5     5   15      20\n6     6   16      22\n7     7   17      24\n8     8   18      26\n9     9   19      28\n10   10   20      30\n```\n:::\n:::\n\n\n**Case study 2: to create a new variable `new_var` in `df` that is the sum of `var1` and `var2`; `new_var2` is the product of `var1` and `var3`.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(var1 = 1:10, var2 = 11:20, var3 = 21:30)\nwithin(df, {\n  new_var <- var1 + var2\n  new_var2 <- var1 * var3\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2 var3 new_var2 new_var\n1     1   11   21       21      12\n2     2   12   22       44      14\n3     3   13   23       69      16\n4     4   14   24       96      18\n5     5   15   25      125      20\n6     6   16   26      156      22\n7     7   17   27      189      24\n8     8   18   28      224      26\n9     9   19   29      261      28\n10   10   20   30      300      30\n```\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   var1 var2 var3\n1     1   11   21\n2     2   12   22\n3     3   13   23\n4     4   14   24\n5     5   15   25\n6     6   16   26\n7     7   17   27\n8     8   18   28\n9     9   19   29\n10   10   20   30\n```\n:::\n:::\n\n\nIn the code chunk above, two new columns are being created and please note that no column has been added to the original data. You have to assign the output from the `within` environment to a new object. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}