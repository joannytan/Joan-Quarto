---
title: "`with` vs `within` evaluate expression in an environment"
description: "The beauty of functional programming"
author:
  - name: Joan Tan
    url: https://joantan.org/
    orcid: 0000-0001-6374-1568
    affiliation: Department of Econometrics and Business Statistics, Monash University/ NAB 
    affiliation-url: https://www.monash.edu/business/econometrics-and-business-statistics/
date: 01-16-2024
categories: [R, intermediate, with] # self-defined categories
citation: 
  url: https://joantan.org/R/2024-01-16-with-within/ 
image: with.jpg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

`with` evaluates an expression in an environment constructed from data, possibly modifying the data in the process. `within` is similar to `with`, except that it modifies the data frame directly and only examines the environemnt after the evaluation of the expression.

**Case study 1: to create a new variable `new_var` in `df` that is the sum of `var1` and `var2`**

```{r, message=FALSE}
df <- data.frame(var1 = 1:10, var2 = 11:20)
df

# Method 1: with
df$new_var <- with(df, var1 + var2) 
# is equivalent to
df$new_var <- df$var1 + df$var2

df

# Method 2: within
within(df, new_var <- var1 + var2)

# Method 3: mutate
library(dplyr)
df %>% mutate(new_var = var1 + var2)
```

**Case study 2: to create a new variable `new_var` in `df` that is the sum of `var1` and `var2`; `new_var2` is the product of `var1` and `var3`.**

```{r, message=FALSE}
df <- data.frame(var1 = 1:10, var2 = 11:20, var3 = 21:30)
within(df, {
  new_var <- var1 + var2
  new_var2 <- var1 * var3
})

df
```

In the code chunk above, two new columns are being created and please note that no column has been added to the original data. You have to assign the output from the `within` environment to a new object.
